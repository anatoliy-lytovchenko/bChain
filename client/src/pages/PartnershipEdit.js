/* 
* Generated by
* 
*      _____ _          __  __      _     _
*     / ____| |        / _|/ _|    | |   | |
*    | (___ | | ____ _| |_| |_ ___ | | __| | ___ _ __
*     \___ \| |/ / _` |  _|  _/ _ \| |/ _` |/ _ \ '__|
*     ____) |   < (_| | | | || (_) | | (_| |  __/ |
*    |_____/|_|\_\__,_|_| |_| \___/|_|\__,_|\___|_|
*
* The code generator that works in many programming languages
*
*			https://www.skaffolder.com
*
*
* You can generate the code from the command-line
*       https://npmjs.com/package/skaffolder-cli
*
*       npm install -g skaffodler-cli
*
*   *   *   *   *   *   *   *   *   *   *   *   *   *   *   *
*
* To remove this comment please upgrade your plan here: 
*      https://app.skaffolder.com/#!/upgrade
*
* Or get up to 70% discount sharing your unique link:
*       https://app.skaffolder.com/#!/register?friend=5e007ebfa4f4b55911b44117
*
* You will get 10% discount for each one of your friends
* 
*/
// Dependencies
import React, { Component } from "react";
import { Link } from "react-router-dom";
import Utils from "../utils/utils";

// Redux
import PropTypes from "prop-types";
import { bindActionCreators } from "redux";
import { connect } from "react-redux";

// Material UI
import TextField from "@material-ui/core/TextField";
import Button from "@material-ui/core/Button";
import Select from "@material-ui/core/Select";
import MenuItem from "@material-ui/core/MenuItem";
import InputLabel from "@material-ui/core/InputLabel";
import FormControl from "@material-ui/core/FormControl";
import Chip from "@material-ui/core/Chip";
import Input from "@material-ui/core/Input";

// Custom Actions


// START IMPORT ACTIONS
import PartnershipActions from "../redux/actions/PartnershipActions";
import OrganizationActions from "../redux/actions/OrganizationActions";

// END IMPORT ACTIONS

/** APIs

* actionsPartnership.create
*	@description CRUD ACTION create
*
* actionsOrganization.findBy_partnership
*	@description CRUD ACTION findBy_partnership
*	@param Objectid key - Id della risorsa _partnership da cercare
*
* actionsPartnership.get
*	@description CRUD ACTION get
*	@param ObjectId id - Id resource
*
* actionsOrganization.list
*	@description CRUD ACTION list
*
* actionsPartnership.update
*	@description CRUD ACTION update
*	@param ObjectId id - Id
*

**/

class PartnershipEdit extends Component {
  // Init partnership
  constructor(props) {
    super(props);
    this.state = {
      partnership: {}
    };
  }

  // Load data on start
  componentDidMount() {
    if (this.props.match.params.id !== "new") {
      this.props.actionsPartnership.loadPartnership(this.props.match.params.id);
      this.props.actionsOrganization.findBy_partnership(this.props.match.params.id);
    }
    
    this.props.actionsOrganization.loadOrganizationList();
  }

  // Insert props partnership in state
  componentWillReceiveProps(props) {
    this.setState(...this.state, {
      partnership: props.partnership
    });
  }

  // Save data
  save(event) {
    event.preventDefault();
    if (this.state.partnership._id) {
      this.props.actionsPartnership.savePartnership(this.state.partnership).then(data => {
        this.props.history.push("/partnerships/");
      });
    } else {
      this.props.actionsPartnership.createPartnership(this.state.partnership).then(data => {
        this.props.history.push("/partnerships/");
      });
    }
  }

  // Show content
  render() {
    return (
      <div>
        <h1>Partnership Edit</h1>
        <form className="myForm" onSubmit={this.save.bind(this)}>

          
          <TextField
            id="Name"
            label="Name"
            value={this.state.partnership.Name || ""}
            onChange={Utils.handleChange.bind(this, "partnership")}
            margin="normal"
            fullWidth
            required
            {...(!this.state.partnership.Name && this.state.partnership.Name === ""
              ? { error: true }
              : {})}
          />
          
          {/* RELATIONS */}

          <h2 className="mb-20">Relations</h2>
          
          {/* Relation m:m _organization with Organization */}
          
          <FormControl fullWidth className="mb-20">
            <InputLabel htmlFor="_organization">_organization</InputLabel>
            <Select
              multiple
              value={this.state.partnership._organization || []}
              onChange={Utils.handleChangeSelect.bind(this, "partnership")}
              input={<Input id="_organization" name="_organization" />}
              renderValue={selected => (
                <div>
                  {selected.map(value => (
                    <Chip key={value} label={value} />
                  ))}
                </div>
              )}
            >
              {this.props.listOrganization && this.props.listOrganization.map(item => (
                <MenuItem
                  key={item._id}
                  value={item._id}
                  style={{
                    fontWeight:
                      this.state.partnership._organization &&
                      this.state.partnership._organization.indexOf(item._id) === -1
                        ? "regular"
                        : "bold"
                  }}
                >
                  {item._id}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          
          {/* EXTERNAL RELATIONS */}
          
          {/* External relation with Organization */}
          
          <h3>Organization</h3>
          {(!this.props.listOrganization || this.props.listOrganization.length === 0) && 
            <div>No Organization associated</div>
          }
          {this.props.listOrganization &&
            this.props.listOrganization.map((item, i) => {
              return (
                <Link to={"/organizations/" + item._id} key={item._id}>
                  {item._id}
                </Link>
              );
            })}

          
          {/* Footer */}
          <div className="footer-card">
            <Link to="/partnerships/">Back to list</Link>

            <Button type="submit" variant="contained" color="primary">
              Save
            </Button>
          </div>
        </form>
      </div>
    );
  }
}

// Store actions
const mapDispatchToProps = function(dispatch) {
  return { 
    actionsPartnership: bindActionCreators(PartnershipActions, dispatch),
    actionsOrganization: bindActionCreators(OrganizationActions, dispatch),
  };
};

// Validate types
PartnershipEdit.propTypes = { 
  actionsPartnership: PropTypes.object.isRequired,
  actionsOrganization: PropTypes.object.isRequired,
};

// Get props from state
function mapStateToProps(state, ownProps) {
  return {
    partnership: state.PartnershipEditReducer.partnership,
    listOrganization: state.PartnershipEditReducer.listOrganization,
    listOrganization: state.PartnershipEditReducer.listOrganization
  };
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(PartnershipEdit);
